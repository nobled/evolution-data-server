2000-04-19  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-folder.c (_delete): Fixed completely
	broken switch() syntax, only compiled because errno is a macro on
	some systems.
	(_list_subfolders): Likewise.

2000-04-18  NotZed  <NotZed@HelixCode.com>

	* camel-mime-parser.c (folder_scan_init): init stream to null.

	* providers/mbox/camel-mbox-summary.c
	(CAMEL_MBOX_SUMMARY_VERSION): Moved to .c file, incremented.
	(index_folder): Changed to have index passed via the summary.
	(decode_string): Do a sanity check on the string size, so we dont
	visit g_malloc()'s friendly abort().

	* camel-folder-pt-proxy.c (camel_folder_pt_proxy_class_init):
	Removed reference to set_name.
	(_set_name): Removed.

	* providers/mbox/camel-mbox-utils.c
	(parsed_information_to_mbox_summary): Removed.  Most of this file
	is about to be binned.

	* providers/mbox/camel-mbox-search.c (func_header_contains): Fixes
	for changes to summary interface.
	(struct _searchcontext): Remove pointer to message info, get it
	straight from the mboxsummary.
	(camel_mbox_folder_search_by_expression): New summary interface.
	(camel_mbox_folder_search_by_expression): Uh, the summary is not
	an object anymore (well not yet).

	* providers/mbox/camel-mbox-folder.c
	(camel_mbox_folder_class_init): Removed set_name init.
	(_set_name): Removed.
	(_open): Call new summary interface.
	(_close): Use new summary interface.
	(_create): Removed a summary object leak.
	(_get_message_count): New summary interface.
	(_get_uid_list): Use new summary interface. FIXME: this is leaky.
	(_get_message_by_uid): Use the new summary interface, some
	cleanup.
	(_append_message): Totally changed, basically just appends the
	message directly, ignores the summary (for now), the summary will
	fix itself up if it needs to.
	(_check_get_or_maybe_generate_summary_file): Bye bye old code.
	(summary_get_message_info): Implement get_message_info again, for
	folder.

	* camel-folder.c (camel_folder_class_init): Removed set_name
	setup.
	(_set_name): Moved contents into _init.
	(_init): Perform the old functions of set_name here.

	* camel-folder.h: Removed the set_name internal interface.

2000-04-14  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-summary.[ch]: Completely replaced with
	new code.

	* Makefile.am (libcamel_la_SOURCES): Removed
	camel-folder-summary.[ch].

	* camel-folder.h (struct _CamelFolder): Removed summary.
	(struct _CamelFolder): Changed flags to be 1 bit bitfields.

	* camel-folder-summary.[ch]: Class removed entirely.

	* camel-folder.c (camel_folder_get_summary): Removed.
	(camel_folder_summary_get_message_info): Moved from
	camel-folder-summary.c
	(camel_folder_summary_get_subfolder_info): Moved from
	camel-folder-summary.c

	* camel-mime-parser.c (folder_scan_step): Store the start of
	headers and start of from in the scan state.
	(camel_mime_parser_tell_start_headers): Query the start of the
	headers.
	(camel_mime_parser_tell_start_from): Query the cached start of
	from marker.

2000-04-13  NotZed  <NotZed@HelixCode.com>

	* gmime-content-field.c (gmime_content_field_free): Removed this
	function.  If its too dangerous to use, it shouldn't be here.
	(gmime_content_field_ref): Also ref the embedded content-type.
	(gmime_content_field_unref): Ditto to unref it.

	* camel-mime-utils.h: Add a refcount for content-type header.

	* camel-mime-utils.c (header_content_type_unref): Implement unref
	for content-type.
	(header_content_type_ref): Implement ref for header content type.

2000-04-12  NotZed  <NotZed@HelixCode.com>

	* gmime-content-field.h: Changed to use a _header_content_type.
	Added type/subtype back for compatability with clients.
	
	* gmime-content-field.c: Basically a total rewrite, and now just a
	thin wrapper ontop of header_content_type.
	(_free_parameter): Got rid of it.
	(gmime_content_field_new): Use header_content_type_* functions.
	(gmime_content_field_set_parameter): Likewise.
	(_print_parameter): Blow away.
	(gmime_content_field_write_to_stream): Get details from the
	content_type field.  Should check if it needs to escape chars in
	the paramter value.
	(gmime_content_field_get_mime_type): Likewise.
	(___debug_print_parameter): Get rid of this rather annoyingly
	named function.
	(gmime_content_field_get_parameter): Simplified function.
	(gmime_content_field_construct_from_string): Fixed this to use a
	real parser.
	(gmime_content_field_is_type): New function to test if a type matches.
	(gmime_content_field_construct_from_string): Track type/subtype
	from subordinate content_type header struct.

	* gmime-rfc2047.[ch]: Removed.  Unused.

	* camel-stream-b64.[ch]: Blown away more duplicated code.

	* Makefile.am: Removed camel-stream-b64.[ch], and
	gmime-base64.[ch].

	* camel-mime-part.c (my_get_content_object): Replaced
	camel-stream-b64 with camel-stream-filter/camel-mime-filter-basic.
	(my_write_content_to_stream): Replaced camel-stream-b64 with the
	camel-stream-filter with an encoder.
	(my_get_content_object): Also implement quoted-printable decoding.
	(my_write_content_to_stream): Also implement quoted-printable
	encoding.
	(my_get_output_stream): Took out stream-b64 code (nothing's being
	executed yet anyway).

	* gmime-base64.[ch]: Blown away.  Not used, dont need it.

	* camel-mime-utils.h: Added offset for this header.  Records where
	it is in the source.

	* camel-mime-utils.c (header_raw_append_parse): Add offset
	parameter, to store where the header is stored in the stream.
	(header_raw_append): Added offset param.
	(header_raw_find): Return offset, if a pointer supplied for it.
	(header_raw_replace): Add offset param.
	(header_content_type_new): New function, to create an empty
	content type.
	(header_content_type_set_param): Set a parameter in the
	content-type.
	(header_set_param): Generic header parameter setting function.
	(header_decode_string): Handle NULL input.

	* camel-mime-parser.c (camel_mime_parser_headers_raw): New
	function to get access to all the raw headers.
	(folder_scan_header): Keep track of the header start position, and
	store it when saving the header.

2000-04-11  NotZed  <NotZed@HelixCode.com>

	* camel-mime-utils.c: Moved a bunch of printf's to debug.

	* camel-mime-parser.c: Moved a bunch of printf's to debug.
	(folder_scan_header): Detect end of each header line using the
	last scanned char, and not the last scanned position.

	* camel-mime-filter-index.[ch]: Indexing filter.  Indexes unicode
	sequences into ibex files.

2000-04-09  NotZed  <NotZed@HelixCode.com>

	* camel-mime-part.c: Dont include gmime-base64.h

	* camel-mime-filter-charset.c (complete): Implement the completion
	function.

	* camel-mime-parser.c (folder_scan_step): If we get to the end of
	the body data, check any filters for outstanding completion data.
	(camel_mime_parser_scan_from): Set whether we scan for "From "
	headers or not.

	* camel-stream-filter.c (do_read): If we get to end of stream on
	the source, then call the filtering completion function to see if
	we have any more data to return.

	* camel-mime-filter-basic.c (filter): Implement quoted printable
	encoding and decoding filters.
	(complete): And the complete function as well.

	* camel-mime-utils.c (base64_encode_close): Also take an input
	buffer, allow closing of filters.
	(quoted_encode_step): First cut, simple quoted-printable encoder.
	Doesn't handle trailing spaces/tabs on end of line properly yet.
	(quoted_encode_close): Complete a quoted-encoding.
	(is_qpsafe): New type check, for quoted-printable safe characters
	(that do not need encoding).  Thats all bits used in the type
	table!  Rebuilt the types table.
	(header_content_type_is): Checks a content type against at
	type/subtype match.
	(header_content_type_param): Handle NULL content type pointer.

2000-04-08  NotZed  <NotZed@HelixCode.com>

	* camel-mime-filter-basic.c (filter): Implement the base64
	encoder.  Problem is, there is no way to know when to close it.
	Close/Reset will have to provide the same args as filter, so it can
	flush remaining data *sigh*

	* camel-mime-utils.c (base64_encode_step): A rather complex base64
	encoder, fast?
	(base64_step_close): Companion function to finish off the base64
	sequence.

	* camel-mime-part.c (my_write_content_to_stream): Changed to use
	camel_stream_write_to_stream().

	* camel-stream.[ch] (camel_stream_write_to_stream): From
	camel_stream_b64_write_to_stream().  Fixed some infinite loop
	bugs with error conditions.

	* camel-stream-b64.[ch] (camel_stream_b64_write_to_stream): Removed.
	This has nothing to do with stream-b64, so i've moved it to
	CamelStream.

	* camel-mime-utils.h: Add a comment about refcounting
	header_content_type struct.

	* Makefile.am: Added camel-stream-filter*.[ch].

	* camel-stream-filter.[ch]: Class to implement a generic
	(multipass) filter ontop of a stream.  Only implements a read-only
	stream.

	* camel-mime-parser.c (camel_mime_parser_filter_add): Ref the
	filter we just added.

	* Makefile.am: Added camel-mime-filter*.[ch].

	* camel-mime-filter-charset.[ch]: A filter to preform character set
	conversion (uses unicode_iconv).

	* camel-mime-filter-save.[ch]: A simple filter which will save all
	data directly to a file or file descriptor.

	* camel-mime-filter-basic.[ch]: Implements the basic mime filters,
	base64 and quoted-printable decoding (encoding not implemented yet).

	* camel-mime-filter.[ch]: A filtering class, which can filter streams
	of data without having to copy them.  Simpler than stream classes,
	and can be plugged into a single stream class (when i write it).

2000-04-07  NotZed  <NotZed@HelixCode.com>

	* Makefile.am: Added camel-mime-parser/camel-mime-utils.

	* camel-mime-parser.c: Fast mime parser.

	* camel-mime-utils.c: Mime utility functions, and email header
	parsers.

	* providers/Makefile.am: Removed smtp for now, its a long way from
	building.
	* providers/smtp/Makefile.in: Removed file that shouldn't have been
	checked in.

2000-04-06  Matt Loper  <matt@helixcode.com>

	* camel-folder-pt-proxy.c (_get_full_name): Remove exception param
	from get_full_name() called, since get_full_name() was changed to
	not have an exception in the last param (see dan's notes below).
	(_get_name): same.

2000-04-06  Dan Winship  <danw@helixcode.com>

	* camel-store.[ch]: Reorganize the folder-fetching methods and
	implement a folder cache so that multiple requests for the same
	folder will yield the same CamelFolder object (as long as it
	remains active). Includes some code to remove no-longer-active
	folders from the cache, but it doesn't get used since nothing is
	ever unref'ed in Camel right now...
	
	* providers/mbox/camel-mbox-store.c:
	* providers/pop3/camel-pop3-store.c: update for CamelStore
	changes.

	* camel-folder.[ch]: Remove the (unused) CamelException argument
	from camel_folder_get_name and camel_folder_get_full_name.
	(camel_folder_set_name): make this go away since changing a
	folder's name after it has been created could result in it
	conflicting with a separately-issued folder.
	
2000-04-05  Dan Winship  <danw@helixcode.com>

	* g_url_new really wanted to take a CamelException. So, rename
	Gurl to CamelURL, g_url_* to camel_url_* (with camel_url_new
	taking an exception), and url-util.[ch] to camel-url.[ch]. Also
	force url->port to be numeric and remove camel_service_getport. (I
	was confused before: the URL RFC says the port must be numeric, so
	we don't want to do getportbyname.)

2000-04-01  Dan Winship  <danw@helixcode.com>

	* providers/mbox/camel-mbox-folder.c
	(_check_get_or_maybe_generate_summary_file): Compare
	mbox_file_size and mbox_modtime to the results of stat()ing the
	mbox file, not the summary file. Duh.
	(_close): Update the summary's mbox_file_size and mbox_modtime
	before writing it to disk.

	* providers/mbox/camel-mbox-summary.c (camel_mbox_summary_save,
	camel_mbox_summary_load): Wow. I must have been tired when I wrote
	this code. First, the comparison bug above. Second, it was using
	ntohs and htons instead of ntohl and htonl. Third, I was reading
	the status flag byte in two different places and thus getting out
	of sync. Fourth, it was writing out field_length bytes of each
	header field after having converted field_length to network byte
	order, resulting in lots of random crap being appended, and the
	summary files being huge. (Fortunately, since the size/modtime
	comparison was biffed, the garbage summary read from disk was
	always immediately discarded.)

	* providers/mbox/camel-mbox-parser.c (camel_mbox_parse_file): fix
	an off-by-one error that caused the last-used UID to be reused if
	the summary file was regenerated. (That one wasn't my fault. :-)

2000-03-31  Dan Winship  <danw@helixcode.com>

	* camel-stream-mem.c: implement unimplemented methods

	* gmime-content-field.c
	(gmime_content_field_construct_from_string):
	* data-wrapper-repository.c
	(data_wrapper_repository_get_data_wrapper_type):
	* camel-simple-data-wrapper.c (my_write_to_stream):
	* camel-mime-part.c (my_set_input_stream):
	remove debugging printf()s that no longer seem useful.

2000-03-31  Matt Loper  <matt@helixcode.com>

	* camel-formatter.c (text_to_html): Added "convert_newlines_to_br"
	boolean param, to give the option of not converting '\n's to <br>
	tags. This way, when we stick stuff in a <pre> tag, newlines stay
	newlines.

2000-03-30  Matt Loper  <matt@helixcode.com>

	* camel-formatter.c (handle_text_plain): Use <pre> tag to force
	the use of monospaced fonts.

2000-03-30  Dan Winship  <danw@helixcode.com>

	* camel-service.c (camel_service_getport): Add a htons in the
	default_number case, and document the fact that the function
	returns the port in network byte order.

	* providers/pop3/camel-pop3-store.c (pop3_connect): Revert
	Miguel's change. The port number bug was actually somewhere
	else, and the IP address copying code was fine already.
	
2000-03-29  Miguel de Icaza  <miguel@gnu.org>

	* providers/pop3/camel-pop3-store.c (pop3_connect): Add htons
	(port), and only copy 4 bytes for the IP address to prevent a DNS
	attack. 

2000-03-28  Dan Winship  <danw@helixcode.com>

	* camel-seekable-substream.c
	(camel_seekable_substream_new_with_seekable_stream_and_bounds):
	make this return a CamelStream rather than a
	CamelSeekableSubstream, because that's the way Gtk objects tend to
	work.

	* camel-service.c (camel_service_gethost,
	camel_service_getport): convenience functions to canonicalize
	the host and port values of a service's URL.
	* providers/pop3/camel-pop3-store.c: use them

	* providers/mbox/camel-mbox-folder.c
	(_check_get_or_maybe_generate_summary_file): Make this work when
	the inbox file doesn't yet exist.

2000-03-27  Dan Winship  <danw@helixcode.com>

	* providers/mbox/camel-mbox-folder.c (_append_message): uncomment
	the call to unlink the temp file: there's no way to tell
	camel_stream_fs to truncate a file, so reusing the same file was
	resulting in junk at the ends of messages.

	* camel-folder.[ch]: add delete_message_by_{number,uid}.

	* providers/pop3/camel-pop3-folder.[ch]: implement
	delete_message_by_uid. Add a close method to do expunging
	of deleted messages if requested.

	* providers/pop3/camel-pop3-store.[ch]: support for
	CamelPop3Folder::close. (You have to close the connection
	in order to expunge the folder, thus the store may be
	connected in the CamelService::is_connected sense when it
	is not actually connected to the server.) Also some bugfixes.

2000-03-27  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-folder.c (_append_message): Unref the
	output_stream when done, close doesn't do it.
	(_append_message): Clear all uid's from the appending messages, so
	they are reassigned proper unique id's.

	* gmime-utils.c (get_header_array_from_stream): Actually free the
	header, it is copied elsewhere.

2000-03-26  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-utils.c (camel_mbox_write_xev): Added
	folder parameter to function.  Fixed callers.
	(index_message): Index a message as it is assigned a unique id.

	* camel-mime-part.c (my_set_content_id): Make sure we malloc and
	copy the content_id, otherwise *poof*

2000-03-25  NotZed  <NotZed@HelixCode.com>

	* camel-medium.c (_finalize): Another leak, unref the content if
	finished with it.

	* camel-recipient.c (camel_recipient_table_free): Plug another
	memory leak - actually free the recipient table.

	* camel-mime-message.c (_finalize): Plugged a memory leak with the
	flags table.

	* gmime-utils.c (_store_header_pair_from_string): A simpler, more
	debuggable and functionally identical header extraction function.

2000-03-24  NotZed  <NotZed@HelixCode.com>

	* gmime-content-field.c (gmime_content_field_set_parameter):
	Remove the hash table entry before freeing its key and data.

2000-03-27  Dan Winship  <danw@helixcode.com>

	* providers/Makefile.am (SUBDIRS): Add pop3.

	* providers/pop3/camel-pop3-store.c: keep separate input and
	output streams so the output doesn't end up being buffered.

	* providers/pop3/camel-pop3-folder.c (get_message_by_number):
	finish implementing this.

2000-03-27  Michael Meeks  <michael@helixcode.com>

	* camel-mime-part.c (my_set_disposition): fix so less broken.
	(my_finalize): remove dodgy disposition free.

	* camel-data-wrapper.c (my_set_mime_type_field): unref instead of
	free on mime_type.

2000-03-27  Dan Winship  <danw@helixcode.com>

	* camel-service.c (camel_service_free_auth_types): new routine to
	free the data allocated by camel_service_query_auth_types.

	* providers/pop3/camel-pop3-store.c (free_auth_types): implement

	* camel-stream-mem.c (camel_stream_mem_new_with_buffer): rename
	camel_stream_mem_new_with_buffer to ..._with_byte_array and add a
	new ..._with_buffer that takes a char * rather than a GByteArray.

	* Remove CamelStreamBufferedFs, since CamelStreamBuffer makes it
	redundant.

2000-03-25  Dan Winship  <danw@helixcode.com>

	* camel-folder-summary.[ch]: change the CamelFolderSummary
	interfaces to allow partial summary queries (for dealing
	with very large folders). Remove the "extended_fields" from
	CamelFolderInfo and CamelMessageInfo: this is better dealt
	with by subtyping.

	* providers/mbox/camel-mbox-summary.[ch]: Make CamelMboxSummary a
	subclass of CamelFolderSummary. Update interfaces for that. Remove
	the internal/external summary distinction. Remove the (unused) md5
	checksum in the folder summary. Change the summary file format
	(primarily to make it no longer byte-order dependent) and add a
	version number to it so it will be easier to change in the future.
	
	* providers/mbox/camel-mbox-folder.[ch]
	* providers/mbox/camel-mbox-search.c
	* providers/mbox/camel-mbox-utils.c: update for summary changes

	* camel-exception-list.def: add
	CAMEL_EXCEPTION_FOLDER_SUMMARY_INVALID
	
2000-03-23  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-provider.c: Added flag to provider
	initialisation, to match changed structure.

2000-03-22  NotZed  <NotZed@HelixCode.com>

	* camel-folder.[ch]: Added async search api.

	* providers/mbox/camel-mbox-search.c
	(camel_mbox_folder_search_by_expression): Changed to use an
	asynchronous interface.
	(camel_mbox_folder_search_cancel): Cancel function for async
	interface.

2000-03-23  Dan Winship  <danw@helixcode.com>

	* camel-stream-buffer.c (camel_stream_buffer_read_line): Function
	to read one line of any size from a stream and return it in
	allocated memory.

2000-03-22  Dan Winship  <danw@helixcode.com>

	* camel-service.c (camel_service_query_auth_types): New function
	to query a service for the authentication protocols it supports.
	* providers/pop3/camel-pop3-store.c (query_auth_types): implement

	* camel-provider.c (camel_provider_scan): New function to
	scan the provider dir and return a list of all providers.

	* providers/pop3/camel-pop3-folder.c: fill this in partially
	* providers/pop3/camel-pop3-store.c: make camel_pop3_command
	return the text after "+OK"/"-ERR" and add a separate
	camel_pop3_get_additional_data to get the message body or
	whatever. Also make them take a CamelPop3Store rather than
	a CamelStreamBuffer.

2000-03-22  Matt Loper  <matt@helixcode.com>

	* camel-formatter.c (debug): Disabled some useless debug
	messaging.

2000-03-21  Dan Winship  <danw@helixcode.com>

	* providers/pop3: some initial bits of the POP3 provider, to
	make Matt happy. Incomplete, untested, etc.

2000-03-21  bertrand  <bertrand@helixcode.com>

	* providers/mbox/camel-mbox-summary.c 
	(camel_mbox_summary_append_internal_to_external): copy the size field

	* providers/mbox/camel-mbox-folder.c (_get_message_by_uid): initialize 
	message_info to NULL

	* camel-folder-summary.h: added the size field.

	* providers/mbox/camel-mbox-summary.h: 
	added the received_date field.

	* providers/mbox/camel-mbox-summary.c:
	documented all functions.

	* camel-folder-summary.h: name change and 
	new fields.

	* providers/mbox/camel-mbox-search.c: update to 
	conform to name change in the summary fields.

2000-03-10  bertrand  <bertrand@helixcode.com>

	* camel-service.h: cosmetic changes.

2000-03-09  Dan Winship  <danw@helixcode.com>

	* s/HelixCode/Helix Code, Inc./ in the copyrights

2000-03-07  bertrand  <bertrand@helixcode.com>

	* camel-formatter.c (handle_mime_part): 
	plug mem leaks due to bad documentation
	of camel_content_field_get_mime_type
	(print_camel_body_part): idem
	(handle_multipart_alternative): idem

	* gmime-content-field.c (gmime_content_field_get_mime_type): 
	documentation fix.


	* camel-mime-part.c (my_finalize): unref the 
	content_input_stream if any. 

2000-03-06  bertrand  <bertrand@helixcode.com>

	* camel-stream-fs.c (_seek): fix a bogus calculation
	in the return position.

2000-03-05  bertrand  <bertrand@helixcode.com>

	* camel-session.h: cosmetic fixes.

	* camel-stream-fs.c (_read): 
	(_seek): fixed the current position so that it refers
	to the current position in the stream, not in its parent.

2000-03-04  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-search.c
	(camel_mbox_folder_search_by_expression): Ref the summary
	after we have got it.

2000-03-04  bertrand  <bertrand@helixcode.com>

	* camel-mime-part.c (my_write_content_to_stream): 
	stream the raw content instead of nothing if the encoding
	is not supported.

	* camel-stream-fs.c (_seek): handle eos more
	properly.

	* camel-formatter.c (get_bonobo_tag_for_object): 
	bonobo-goad-id is the good key to look for. 
	(get_bonobo_tag_for_object): close the <object> tag.
	(get_bonobo_tag_for_object): the correct syntax for the
	to set a parameter inside an <object> tag is :
	<object classid="..."> <param name="uid" value="..."> <param ...>
	</object>

2000-03-03  bertrand  <bertrand@helixcode.com>

	* providers/mbox/camel-mbox-folder.c (_get_message_by_uid): 
	use set_input_stream instead of construct_from_stream
	to feed the message object. 

	* camel-data-wrapper.c (my_write_to_stream): reset output stream.
	(my_set_input_stream): unref the previous input stream.
	use the set_output_stream for default behaviour.
	(my_set_output_stream): unref previous output stream.

	* camel-mime-part.c (my_write_content_to_stream): reset content
	object output stream.

2000-03-03  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-utils.c (camel_mbox_write_xev): Make
	sure we open with create with a creation mask.

2000-03-01  NotZed  <NotZed@HelixCode.com>

	* camel-mime-part-utils.c
	(camel_mime_part_construct_content_from_stream): DO NOT assert on
	content type, we have fallback code 4 lines below it ... *sigh*

2000-02-29  NotZed  <NotZed@HelixCode.com>

	* Makefile.am (libcamelinclude_HEADERS): Added camel-stream-buffer
	to build.

	* camel-stream-buffer.[ch]: Generic buffer which can be applied to
	any stream.

2000-03-03  bertrand  <bertrand@helixcode.com>

	* camel-formatter.c (handle_image): in the case
	of images, put the content object output stream
	in the url. This allows the message browser
	to show inline images.

	* camel-stream-b64.c (my_read_encode): fixed state
	0 keep value. 

2000-03-02  bertrand  <bertrand@helixcode.com>

	* camel-stream-b64.c (my_read_encode): don't forget to 
	set the state to 0 after 3.
	(my_read_encode): don't forget to encode, even in state 3.

	* camel-simple-data-wrapper.c: static functions are prefixed 
	with my_ instead of _
	* camel-multipart.c: static functions are prefixed 
	with my_ instead of _
	(my_write_to_stream): commented.
	(my_write_to_stream): warning in case the boudary is set
	but is a zero length string.

	* camel-mime-part.c (camel_mime_part_encoding_from_string): 
	remove debug trace. 
	
	* camel-mime-part.c: Replaced all static functions
	with name begining with _ by the same name begining
	with "my_" to prevent the possible conflicts 
	with system symbols Dan warned us about. 
	
	* camel-stream-b64.c (camel_stream_b64_write_to_stream): 
	use CamelStreamB64 type for the input stream.

	* camel-mime-part.c (_get_content_object): remove 
	debugging trace
	(_write_content_to_stream): implement the b64 
	encoding the new way (that is using camel_stream_b64)

	* camel-data-wrapper.c (my_write_to_stream): 
	fix implementation so that it writes properly
	to the output stream even.

	* camel-stream-b64.c (camel_stream_b64_write_to_stream): 
	fix implementation. 

2000-02-29  bertrand  <bertrand@helixcode.com>

	* camel-stream-b64.c (camel_stream_b64_write_to_stream): new
	utility function. 

	* camel-data-wrapper.c (_write_to_stream): default
	implementation. 

	* gmime-utils.c (_store_header_pair_from_string): 
	revert strange changes. 

	* camel-stream-b64.c (my_read_decode): set eos to true when we
	have read the whole input stream. 
	(my_reset): set eos to FALSE.

2000-02-28  NotZed  <NotZed@HelixCode.com>

	* camel-mime-part.c (_parse_header_pair): Dont free this either.

	* camel-medium.c (_remove_header): Ugh, dont free the header
	before we actually remove it.
	(_add_header): Ugh, dont free hashtable entries which may be
	duplicated (hash_insert _will_ reference that memory).

	* string-utils.c (string_trim): Trimming a 0-length string is not
	an error.

	* camel-mime-message.c (_parse_header_pair): Fixed very broken
	memory handling of header_name/value.

	* providers/mbox/camel-mbox-utils.c (camel_mbox_write_xev):
	Initialise end_of_last_message always.
	(camel_mbox_copy_file_chunk): Stop trying to read if we run out of
	data, rather than looping forever.
	(camel_mbox_write_xev): Use an open flag when opening with create.

	* camel-folder.c (camel_folder_search_by_expression): No, its not
	a fatal error to search on a non-searchable folder, you just dont
	get any matches.
	(_open): Dont open an opened folder (i dont see why this is really
	a bug, but what the hell ...)

	* providers/mbox/camel-mbox-folder.c (_init): Set search cap on.
	(_open): Call parent class to perform open.  Remove folder-open
	check to parent instead.
	(_create): open takes a creation mask, dont use umask to try and
	set the open mode.
	(_delete): Dont bother checking folder==NULL, its already been
	checked on the external interface (changed to an assertion, this
	would have to be a camel bug).
	(_delete_messages): Likewise.
	(_create): Ditto.
	(_init): Dont go and clear all the paths and shit that the parent
	open just setup for us.
	(_delete_messages): Get rid of more umask stuff.
	(_append_message): Make sure we pass file mode to open with create.
	(_append_message): Cleaned up some indenting to make it readable.

	* camel-stream-b64.c (my_read_encode): Fixed a typo.

	* providers/mbox/camel-mbox-search.c: Changed to use e-sexp,
	rather than filter-sexp.

2000-02-28  bertrand  <bertrand@helixcode.com>

	* camel-stream-b64.c (my_read_encode): encoding
	filter.

2000-02-23  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel-stream-b64.c: changed the __static 
	suffix into a my_ prefix. 
	(camel_stream_b64_set_mode): reset the persistent
	status. 
	(my_read_decode): remove superfluous %
	
	* providers/mbox/camel-mbox-utils.c (camel_mbox_copy_file_chunk): 
	fix exception description message.

2000-02-24  Dan Winship  <danw@helixcode.com>

	* camel-session.c: Add camel_session_get_transport_for_protocol.

	* camel-transport.h:
	* camel-transport.c: Add an abstract CamelTransport class.

	* providers/sendmail/*: A CamelTransport that uses sendmail
	to deliver mail.

2000-02-24  Dan Winship  <danw@helixcode.com>

	* camel-folder.c: use CamelExceptions for run-time errors, not
	incorrect code. Don't bother validating that an object exists from
	inside one of its methods, since you couldn't have gotten there if
	it didn't. Fix some code style bugs.

	(_init): Rename init_with_store to init and add parent_folder,
	separator, and name arguments.
	(_set_name): Get separator from self, not parent_store now.

	* camel-store.h:
	* camel-store.c: Remove get/set_separator.

	* providers/mbox/: Update for above.

2000-02-23  Dan Winship  <danw@helixcode.com>

	* camel-medium.c (_finalize): Free the data in the headers hash
	table.
	(_add_header): g_strdup the header name and value when adding it.

	* camel-mime-part-utils.c
	(camel_mime_part_construct_headers_from_stream): Free the header
	data after calling camel_medium_add_header, since it will have
	g_strdup()ed it itself.

2000-02-22  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-search.c: Dont compile by default.

	* providers/mbox/Makefile.am: Fuck off the filter code.

2000-02-22  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel-stream-b64.c (read_decode__static): 
	don't read the char if we reached the length
	of the output buffer. Hours lost on this
	%$!@# bug : 3.5

	* camel-folder.c (camel_folder_get_subfolder): 
	(camel_folder_create): 
	(camel_folder_delete): 
	(camel_folder_delete_messages): 
	(camel_folder_list_subfolders): 
	(camel_folder_expunge): 
	(camel_folder_get_message_by_number): 
	(camel_folder_get_message_count): 
	(camel_folder_append_message): 
	(camel_folder_copy_message_to): 
	(camel_folder_get_summary): 
	(camel_folder_get_message_uid): 
	(camel_folder_get_message_by_uid): 
	(camel_folder_get_uid_list): 
	Check folder state (open/close) and raise an
	exception if it is not ok. 
	
	* providers/mbox/camel-mbox-folder.c (_create): 
	create the file and the path with two different
	names.

	* camel-folder.c (_create): handle the case 
	when the folder name starts with '/'

	* camel-exception.c (camel_exception_new): use 
	(void) instead of () in decl.

	* camel-exception.h: cosmetic fixes.

	* camel-exception.c (camel_exception_init): new routine.
	Fix a bug in mail/message-list.c
	

	* camel-folder.h: cosmetic changes.

	* camel-stream-b64.c (reset__static): added a
	reset method. Thanks message-browser to find
	so much bugs :)

	* providers/mbox/Makefile.am (libcamelmbox_la_LIBADD): readd
	Unicode libs.

2000-02-21  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel-formatter.c (lookup_unique_id): 
	awful hack to test get_output_stream.
	* camel-stream-b64.[ch] :
	b64 encoding/decoding is now implemented as
	a stream. 
	

2000-02-21  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel-seekable-substream.c (_reemit_parent_signal): 
	emit "data_available" when parent stream emits it. 


2000-02-21  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/Makefile.am: Uh, fixed LIBADD again.  What was
	there was never ever going to work, wasn't it tested?


2000-02-21  Dan Winship  <danw@helixcode.com>

	* camel-session.h: (struct _CamelSession): Add authenticator.

	* camel-session.c (camel_session_new): Add authenticator.
	(camel_session_query_authenticator): New function to query the
	session authenticator for password, etc, information.

2000-02-21  Dan Winship  <danw@helixcode.com>

	* camel-session.c: add CamelExceptions to several functions. Use
	camel_session_new to initialize the session and URL fields of
	created CamelStores as appropriate.

	* camel-store.h:
	* camel-store.c
	* camel-service.h:
	* camel-service.c: Move the session and url (and associated
	functions) from CamelStore to CamelService. Add url_flags to
	CamelService so subclasses can specify which URL components
	are mandatory for them.	Add camel_session_new for
	camel_session_get_store* to use.

	* providers/mbox/camel-mbox-folder.c:
	* providers/mbox/camel-mbox-store.c:
	* providers/mbox/camel-mbox-store.h: Update for above changes.

	* camel-exception-list.def: Once camel is being used for real,
	exceptions won't be renumberable. So renumber them now to make
	more room to add exceptions to the various categories later, and
	add a big warning message.

2000-02-20  Dan Winship  <danw@helixcode.com>

	* providers/mbox/Makefile.am: add libibex back to
	libcamelmbox_la_LIBADD

2000-02-18  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/camel-mbox-search.h
	(camel_mbox_folder_search_by_expression): Added exception to call,
	and fixed caller.

	* providers/mbox/camel-mbox-search.c
	(camel_mbox_folder_search_by_expression): Major changes, to use
	the sexp evaluator from filter/filter-sexp.c to implement the
	searching.
	(func_body_contains): Changed to support multiple strings in 1
	command (results or'd together)

	* url-util.c (g_url_new): Fixed a typo (colon == 0 isn't right),
	and made it so full url's are absolute pathed (Dan, this is how it
	has to work!).  Also, always include a path part, even if it is an
	empty string.

2000-02-18  Dan Winship  <danw@helixcode.com>

	* camel/camel-types.h: New header with the typedefs for all camel
	classes. Now the class headers can just include this and the
	header for the parent type. This makes it possible for
	CamelService to include a CamelSession without creating an
	#include loop.

	* camel/*:	
	* composer/e-msg-composer-attachment-bar.h:
	* mail/folder-browser.c:
	* mail/message-list.c: frob #includes to match the new reality

2000-02-17  Dan Winship  <danw@helixcode.com>

	* camel/camel-service.h:
	* camel/camel-service.c: Make camel-service us a Gurl internally.
	Remove the login/password interfaces and instead provide
	camel_service_connect_with_url. Add CamelExceptions

2000-02-17  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-formatter.c (handle_text_plain): 
	(handle_text_html): use camel_stream_reset instead
	of seek. The formatter should be able to work 
	with all streams, not only seekable streams. 
	In the case where some provider implementation
	would not be able to provide a reset method 
	to their stream, implementors would have
	to find a workaround.

	* camel/camel-session.c (camel_session_new): use
	(void) instean of () in function decl.

	* camel/camel-folder.c: ifdef async operation 
	related code. 

	* camel/camel-seekable-stream.c (_seek): added a warning.
	(_reset): default implementation of reset for seekable
	stream.

	* camel/camel-mime-message.h: set_received_date declaration fix.
	cosmetic changes.

	* camel/providers/mbox/camel-mbox-provider.c (camel_provider_module_init): 
	use (void) instead of ().

	* camel/camel-stream.c (camel_stream_reset): 
	new method for CamelStream.

2000-02-17  Dan Winship  <danw@helixcode.com>

	* camel/url-util.c (g_url_to_string): New function to convert
	a Gurl back into a char *.

2000-02-17  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-formatter.c (handle_text_plain): 
	revamped so that it uses the output stream
	of the data wrapper
	(handle_text_html): ditto.
	
	
	* camel/camel-simple-data-wrapper.h: 
	* camel/camel-simple-data-wrapper.c (camel_simple_data_wrapper_new): 
	use (void) instead of ().
	(_get_output_stream): simple implementation. 

2000-02-16  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-data-wrapper.c (_set_input_stream): ref input stream
	(_set_output_stream): ref output stream
	(_finalize): unref input and output streams

	* camel/camel-seekable-substream.c (_set_bounds): don't
	seek the begining of the substream.
	(_eos): fix eos condition testing. 
	(_finalize): unref parent stream
	(_init_with_seekable_stream_and_bounds): ref parent stream

	* camel/gstring-util.c (g_string_equal_for_hash): 
	(g_string_equal_for_glist): return type is int.

	* camel/camel.h: 
	* camel/camel.c (camel_init): use (void) 
	instead of ().
	
2000-02-16  NotZed  <NotZed@HelixCode.com>

	* providers/mbox/Makefile.am (libcamelmbox_la_LIBADD): Added
	libfilter to link line (temporarily?).  Required for
	filter-sexp.

2000-02-15  bertrand  <bertrand@helixcode.com>

	* camel/camel-multipart.c (_localize_part): 
	this routine replaces the _read_part routine
	and does not store the part in a buffer. 
	(_set_input_stream): use the set_input_stream
	instead of the construct_from_stream.
	each bodypart is given an input stream. 

	* camel/camel-mime-part-utils.c: 
	include the data-wrapper-repository header. 
	(camel_mime_part_construct_content_from_stream): 
	use the set_input_stream instead of the 
	construct_from_stream method. 

	* camel/camel-seekable-substream.c (_set_bounds): 
	cur position is set to 0 not to inf_bound.

2000-02-15  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-mime-part.c: include gmime-base64.h
	various compilation and runtime fixes.
	(_set_input_stream): store the input substream 
	for the content object.

	* camel/camel-data-wrapper.h: declare the 
	set/get function on input/output stream.

	* camel/camel-mime-part.c (_get_content_object): 
	don't use a temporary mem stream. 	

	* camel/camel-seekable-substream.c (_seek): 
	(_eos): 
	(_read): the substream can be unlimited in length

	* camel/camel-data-wrapper.c (camel_data_wrapper_class_init): 
	set the get/set_input/output_stream methods. 	

	* camel/camel-multipart.c (_construct_from_stream): 
	camel_stream_seek -> camel_seekable_stream_seek

2000-02-14  Miguel de Icaza  <miguel@gnu.org>

	* camel/providers/mbox/Makefile.am (libcamelmbox_la_LIBADD): Add
	the unicode libraries as well.

	* camel/camel-provider.c (camel_provider_register_as_module): Add
	error reporting here.  Desire to use Solaris increases.  Hair loss
	in the last two hours: 5,400.

	* camel/providers/mbox/camel-mbox-provider.c
	(camel_mbox_get_provider): Renamed function.

	* camel/camel.h: All include files use camel/ now here.

	* camel/providers/mbox/Makefile.am: Drop all the dynamism from
	Camel, and make this a standard library.

2000-02-14  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/gmime-utils.c (get_header_array_from_stream): use the 
	eos stream method. 
	(gmime_read_line_from_stream): ditto.

	* camel/camel-stream-fs.h (struct ): add the eof field
	cosmetics changes. 

	* camel/camel-stream-fs.c (camel_stream_fs_init): set eof.
	(_read): set eof on end of file.
	(_eos): implemented.

	* camel/gmime-utils.c (get_header_array_from_stream): 
	make a blocking version of the header parser. 
	When the fs stream uses gnome-vfs, this should
	be changed. 
	(gmime_read_line_from_stream): ditto. 

2000-02-11  bertrand  <Bertrand.Guiheneuf@aful.org>

	* camel/camel-stream-fs.c: 
	everywhere, when using the cur_pos field, do it
	on the CamelSeekableStream object.
	(_seek): small fix. 

	* camel/camel-seekable-stream.c (camel_seekable_stream_seek): 
	s/camel_stream_seek/camel_seekable_stream_seek/g

	* camel/camel-seekable-stream.h: 
	(struct ): added a field to store the
	current position.

	* camel/camel-seekable-stream.c (camel_seekable_stream_get_current_position): 
	New function. Allows to get the current position 
	of a seekable stream.
	

2000-02-13  NotZed  <notzed@zedzone.helixcode.com>

	* providers/mbox/camel-mbox-search.c: New file, implements the
	search api for mbox folders.

	* providers/mbox/Makefile.am: Link with ibex.

	* camel-folder.c (camel_folder_has_search_capability): Api
	additions.
	(camel_folder_search_by_expression): Ditto.

2000-02-12  NotZed  <notzed@zedzone.helixcode.com>

	* providers/mbox/camel-mbox-folder.c (_set_name): Setup index
	filename as well.
	(_init_with_store): Init index filename.  Hmm, none of these
	names ever seem to get free'd (FIXME?)

	* providers/mbox/camel-mbox-folder.h: Add index file name.

2000-02-12  NotZed  <notzed@helixcode.com>

	* camel-folder.h: Add folder search functions.

	** Created ChangeLog just for camel **
	 - refer to ../ChangeLog for changes prior to this date.
